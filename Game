import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.URL;


public class Game extends Applet implements Runnable, KeyListener{
	
	public static final int WIDTH = 800;
	public static final int HEIGHT = 600;
	
	Image image, spacecraftImg, spaceship1, fireImg, backgroundImg, meteorImg;
	URL base;
	Graphics second;
	AudioClip sound1;
	
	public static Spacecraft sc;
	Enemies enemy1, enemy2, enemy3;
	private String scoreBoard;
	private int highScore = 0;
	private String HighScore;
	Background background;
	Meteor meteor, meteor2;
	
	
	@Override
	public void init()
	{
		setSize(WIDTH, HEIGHT);
		setFocusable(true);
		addKeyListener(this);
		Frame frame = (Frame) this.getParent().getParent();
		frame.setTitle("Spacecraft");
		try {
			base = getDocumentBase();
		} catch (Exception e) {
	       e.printStackTrace();
		}
		
		spacecraftImg = getImage(base, "data/spacecraftImg.png");
		fireImg = getImage(base, "data/fireImg.png");

		backgroundImg = getImage(base, "data/background.png");
		spaceship1 = getImage(base, "data/spaceship1.png");
		meteorImg = getImage(base, "data/meteor.png");
		sound1 = getAudioClip(base, "musics/DogFight.au");
		
		sound1.play();
		sound1.loop();
		
		
	}
	@Override
	public void start()
	{
		background = new Background();
		meteor = new Meteor(-50,500);
		meteor2 = new Meteor(500,100);
		sc = new Spacecraft(100, 200);
		enemy1 = new Enemies();
		enemy2 = new Enemies();
		enemy3 = new Enemies();
		Thread thread = new Thread(this);
		thread.start();
	}
	@Override
	public void run() {
		while(true)
		{
			background.update();
			meteor.update();
			meteor2.update();
			sc.update(enemy1, meteor);
			sc.update(enemy2, meteor);
			sc.update(enemy3, meteor);
			enemy1.update();
			enemy2.update();
			enemy3.update();
			repaint();
			try{
				Thread.sleep(17);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
		
	}
	@Override
	public void stop()
	{
		
	}
	@Override
	public void destroy()
	{
		
	}
	@Override
	public void update(Graphics g)
	{
		if(image == null)
		{
			image = createImage(this.getWidth(), this.getHeight());
			second = image.getGraphics();
		}
		second.setColor(getBackground());
		second.fillRect(0, 0, this.getWidth(), this.getHeight());
		second.setColor(getForeground());
		paint(second);
		
		g.drawImage(image, 0, 0, this);
	}
	@Override
	public void paint(Graphics g)
	{
		background.paint(g, backgroundImg);
		sc.paint(g);
		if(sc.isGoRight())
		{
			g.drawImage(fireImg, sc.getX(), sc.getY() + 45, this);
		}
		meteor.paint(g, meteorImg);
		meteor2.paint(g, meteorImg);
		g.drawImage(spacecraftImg, sc.getX()+ 5, sc.getY(), this);
		g.drawImage(spaceship1, enemy1.getX(), enemy1.getY(), 80, 60, this);
		g.drawImage(spaceship1, enemy2.getX(), enemy2.getY(), 80, 60, this);
		g.drawImage(spaceship1, enemy3.getX(), enemy3.getY(), 80, 60, this);

		if(highScore < sc.getScore())
			highScore = sc.getScore();
		HighScore = Integer.toString(highScore);
		scoreBoard = Integer.toString(sc.getScore());
		Font font = new Font("Serif", Font.BOLD, 32);
		g.setFont(font);
		g.setColor(Color.WHITE);
		g.drawString("Score: " + scoreBoard, WIDTH - 200, 30);
		g.drawString("High Score: " + HighScore, 30, 30);
	}
	@Override
	public void keyPressed(KeyEvent e) {
		switch(e.getKeyCode())
		{
		case KeyEvent.VK_W:
			sc.setGoUp(true);
			break;
		case KeyEvent.VK_S:
			sc.setGoDown(true);
			break;
		case KeyEvent.VK_A:
			sc.setGoLeft(true);
			break;
		case KeyEvent.VK_D:
			sc.setGoRight(true);
			break;
		case KeyEvent.VK_SPACE:
			sc.setFire(true);
			break;
		}
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		switch(e.getKeyCode())
		{
		case KeyEvent.VK_W:
			sc.setGoUp(false);
			break;
		case KeyEvent.VK_S:
			sc.setGoDown(false);
			break;
		case KeyEvent.VK_A:
			sc.setGoLeft(false);
			break;
		case KeyEvent.VK_D:
			sc.setGoRight(false);
			break;
		}
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}


}
